"""
Aplicaci√≥n Streamlit para Multiplicaci√≥n de Matrices Paralelas.
Incluye an√°lisis de rendimiento, Ley de Amdahl y Taxonom√≠a de Flynn.
"""

import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from core.matrix_operations import MatrixOperations
from core.parallel_processor import ParallelProcessor
from core.performance_metrics import PerformanceMetrics
from utils.helpers import (
    get_system_info,
    format_matrix_size,
    estimate_memory_usage,
    get_recommended_workers
)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Multiplicaci√≥n de Matrices Paralelas",
    page_icon="üî¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.8rem;
        font-weight: bold;
        color: #2ca02c;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .info-box {
        background-color: #e8f4f8;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)


def main():
    """Funci√≥n principal de la aplicaci√≥n."""

    # T√≠tulo principal
    st.markdown('<p class="main-header">üî¢ Multiplicaci√≥n de Matrices Paralelas</p>',
                unsafe_allow_html=True)

    st.markdown("""
    **Ejercicio de Programaci√≥n Paralela**: An√°lisis de rendimiento de multiplicaci√≥n
    de matrices usando m√∫ltiples procesos y comparaci√≥n con la Ley de Amdahl.
    """)

    # Sidebar con configuraci√≥n
    st.sidebar.title("‚öôÔ∏è Configuraci√≥n")

    # Informaci√≥n del sistema
    with st.sidebar.expander("üíª Informaci√≥n del Sistema", expanded=False):
        system_info = get_system_info()
        st.write(f"**Procesador:** {system_info['processor']}")
        st.write(f"**N√∫cleos f√≠sicos:** {system_info['cpu_count_physical']}")
        st.write(f"**N√∫cleos l√≥gicos:** {system_info['cpu_count_logical']}")
        st.write(f"**Frecuencia actual:** {system_info['cpu_freq_current']}")
        st.write(f"**RAM total:** {system_info['ram_total']}")
        st.write(f"**RAM disponible:** {system_info['ram_available']}")

    st.sidebar.markdown("---")

    # Configuraci√≥n de matrices
    st.sidebar.subheader("üìä Configuraci√≥n de Matrices")

    matrix_size = st.sidebar.slider(
        "Tama√±o de matriz (N x N)",
        min_value=100,
        max_value=2000,
        value=500,
        step=100,
        help="Tama√±o de las matrices cuadradas a multiplicar"
    )

    st.sidebar.info(f"**Memoria estimada:** {estimate_memory_usage(matrix_size)}")

    # Configuraci√≥n de paralelizaci√≥n
    st.sidebar.subheader("‚ö° Configuraci√≥n de Paralelizaci√≥n")

    workers_options = get_recommended_workers()
    selected_workers = st.sidebar.multiselect(
        "N√∫mero de workers a probar",
        options=workers_options,
        default=workers_options,
        help="Selecciona los n√∫meros de workers para comparar"
    )

    if not selected_workers:
        st.sidebar.error("Selecciona al menos un n√∫mero de workers")
        return

    parallel_method = st.sidebar.selectbox(
        "M√©todo de paralelizaci√≥n",
        options=["Multiprocessing", "Threading", "ProcessPoolExecutor"],
        index=0,
        help="M√©todo de paralelizaci√≥n a utilizar"
    )

    # Semilla para reproducibilidad
    use_seed = st.sidebar.checkbox("Usar semilla aleatoria fija", value=True)
    seed = 42 if use_seed else None

    st.sidebar.markdown("---")

    # Bot√≥n para ejecutar
    run_button = st.sidebar.button("üöÄ Ejecutar Multiplicaci√≥n", type="primary",
                                    use_container_width=True)

    # Tabs principales
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä Resultados",
        "üìà An√°lisis de Amdahl",
        "üèõÔ∏è Taxonom√≠a de Flynn",
        "‚ÑπÔ∏è Informaci√≥n"
    ])

    # Tab 1: Resultados de ejecuci√≥n
    with tab1:
        if run_button:
            execute_multiplication(matrix_size, selected_workers, parallel_method, seed)
        else:
            st.info("üëà Configura los par√°metros en el panel lateral y presiona 'Ejecutar Multiplicaci√≥n'")

    # Tab 2: An√°lisis de Amdahl
    with tab2:
        display_amdahl_analysis(selected_workers)

    # Tab 3: Taxonom√≠a de Flynn
    with tab3:
        display_flynn_taxonomy()

    # Tab 4: Informaci√≥n
    with tab4:
        display_information()


def execute_multiplication(matrix_size: int, workers_list: list, method: str, seed: int):
    """
    Ejecuta la multiplicaci√≥n de matrices y muestra resultados.

    Args:
        matrix_size: Tama√±o de las matrices
        workers_list: Lista de n√∫meros de workers
        method: M√©todo de paralelizaci√≥n
        seed: Semilla aleatoria
    """
    st.markdown('<p class="section-header">üîÑ Ejecutando Multiplicaci√≥n de Matrices</p>',
                unsafe_allow_html=True)

    # Generar matrices
    with st.spinner("Generando matrices aleatorias..."):
        matrix_a = MatrixOperations.generate_random_matrix(matrix_size, matrix_size, seed)
        matrix_b = MatrixOperations.generate_random_matrix(matrix_size, matrix_size, seed)

    # Informaci√≥n de matrices
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Tama√±o de Matriz A", format_matrix_size(matrix_size))
    with col2:
        st.metric("Tama√±o de Matriz B", format_matrix_size(matrix_size))
    with col3:
        st.metric("Tama√±o de Resultado", format_matrix_size(matrix_size))

    st.markdown("---")

    # Ejecuci√≥n secuencial
    st.subheader("1Ô∏è‚É£ Ejecuci√≥n Secuencial (Baseline)")
    with st.spinner("Ejecutando versi√≥n secuencial..."):
        result_seq, time_seq = MatrixOperations.sequential_multiply(matrix_a, matrix_b)

    col1, col2 = st.columns(2)
    with col1:
        st.success(f"‚úÖ **Tiempo secuencial:** {PerformanceMetrics.format_time(time_seq)}")
    with col2:
        st.info(f"**Workers:** 1 (sin paralelizaci√≥n)")

    st.markdown("---")

    # Ejecuci√≥n paralela
    st.subheader(f"2Ô∏è‚É£ Ejecuci√≥n Paralela - {method}")

    results = {}
    progress_bar = st.progress(0)
    status_text = st.empty()

    for idx, num_workers in enumerate(sorted(workers_list)):
        status_text.text(f"Procesando con {num_workers} workers...")

        with st.spinner(f"Ejecutando con {num_workers} workers..."):
            if method == "Multiprocessing":
                _, time_parallel = ParallelProcessor.parallel_multiply_processes(
                    matrix_a, matrix_b, num_workers
                )
            elif method == "Threading":
                _, time_parallel = ParallelProcessor.parallel_multiply_threads(
                    matrix_a, matrix_b, num_workers
                )
            else:  # ProcessPoolExecutor
                _, time_parallel = ParallelProcessor.parallel_multiply_executor(
                    matrix_a, matrix_b, num_workers
                )

        results[num_workers] = time_parallel
        progress_bar.progress((idx + 1) / len(workers_list))

    status_text.text("¬°Ejecuci√≥n completada!")
    st.success("‚úÖ Todas las ejecuciones paralelas completadas")

    st.markdown("---")

    # An√°lisis de resultados
    st.subheader("3Ô∏è‚É£ An√°lisis de Resultados")

    analysis = PerformanceMetrics.analyze_results(time_seq, results)

    # Tabla de resultados
    st.markdown("**üìã Tabla de Resultados:**")

    df_results = pd.DataFrame({
        'Workers': [1] + list(results.keys()),
        'Tiempo (s)': [time_seq] + [results[w] for w in sorted(results.keys())],
        'Speedup': [1.0] + [analysis['speedups'][w] for w in sorted(results.keys())],
        'Eficiencia (%)': [100.0] + [analysis['efficiencies'][w] * 100 for w in sorted(results.keys())]
    })

    st.dataframe(df_results.style.format({
        'Tiempo (s)': '{:.6f}',
        'Speedup': '{:.3f}',
        'Eficiencia (%)': '{:.2f}'
    }), use_container_width=True)

    # Gr√°ficos
    col1, col2 = st.columns(2)

    with col1:
        # Gr√°fico de tiempos
        fig_time = go.Figure()
        fig_time.add_trace(go.Bar(
            x=['Secuencial'] + [f'{w} workers' for w in sorted(results.keys())],
            y=[time_seq] + [results[w] for w in sorted(results.keys())],
            marker_color=['#ff7f0e'] + ['#1f77b4'] * len(results),
            text=[f'{t:.4f}s' for t in [time_seq] + [results[w] for w in sorted(results.keys())]],
            textposition='auto',
        ))
        fig_time.update_layout(
            title="Tiempo de Ejecuci√≥n",
            xaxis_title="Configuraci√≥n",
            yaxis_title="Tiempo (segundos)",
            height=400
        )
        st.plotly_chart(fig_time, use_container_width=True)

    with col2:
        # Gr√°fico de speedup
        fig_speedup = go.Figure()
        speedup_values = [analysis['speedups'][w] for w in sorted(results.keys())]
        fig_speedup.add_trace(go.Scatter(
            x=sorted(results.keys()),
            y=speedup_values,
            mode='lines+markers',
            marker=dict(size=10, color='#2ca02c'),
            line=dict(width=3),
            name='Speedup Real'
        ))
        # L√≠nea ideal (speedup lineal)
        fig_speedup.add_trace(go.Scatter(
            x=sorted(results.keys()),
            y=sorted(results.keys()),
            mode='lines',
            line=dict(dash='dash', color='gray'),
            name='Speedup Ideal'
        ))
        fig_speedup.update_layout(
            title="Speedup (Aceleraci√≥n)",
            xaxis_title="N√∫mero de Workers",
            yaxis_title="Speedup",
            height=400
        )
        st.plotly_chart(fig_speedup, use_container_width=True)

    # Gr√°fico de eficiencia
    fig_efficiency = go.Figure()
    efficiency_values = [analysis['efficiencies'][w] * 100 for w in sorted(results.keys())]
    fig_efficiency.add_trace(go.Bar(
        x=[f'{w} workers' for w in sorted(results.keys())],
        y=efficiency_values,
        marker_color=['#d62728' if e < 50 else '#ff7f0e' if e < 70 else '#2ca02c'
                      for e in efficiency_values],
        text=[f'{e:.1f}%' for e in efficiency_values],
        textposition='auto',
    ))
    fig_efficiency.update_layout(
        title="Eficiencia de Paralelizaci√≥n",
        xaxis_title="Configuraci√≥n",
        yaxis_title="Eficiencia (%)",
        height=400
    )
    st.plotly_chart(fig_efficiency, use_container_width=True)

    # Guardar resultados en session state
    st.session_state['last_results'] = {
        'sequential_time': time_seq,
        'parallel_times': results,
        'analysis': analysis
    }


def display_amdahl_analysis(workers_list: list):
    """
    Muestra an√°lisis de la Ley de Amdahl.

    Args:
        workers_list: Lista de n√∫meros de workers
    """
    st.markdown('<p class="section-header">üìà An√°lisis de la Ley de Amdahl</p>',
                unsafe_allow_html=True)

    st.markdown("""
    La **Ley de Amdahl** establece el l√≠mite te√≥rico de mejora de rendimiento al paralelizar
    un programa, considerando que siempre existe una porci√≥n secuencial no paralelizable.
    """)

    # F√≥rmula
    st.latex(r'''
    Speedup = \frac{1}{(1-P) + \frac{P}{N}}
    ''')

    st.markdown("""
    Donde:
    - **P** = Fracci√≥n paralelizable del programa (0 a 1)
    - **N** = N√∫mero de procesadores
    - **(1-P)** = Fracci√≥n secuencial
    """)

    st.markdown("---")

    # Calculadora interactiva
    st.subheader("üßÆ Calculadora de Ley de Amdahl")

    col1, col2 = st.columns(2)

    with col1:
        parallel_fraction = st.slider(
            "Fracci√≥n Paralelizable (%)",
            min_value=0,
            max_value=100,
            value=90,
            step=5,
            help="Porcentaje del programa que puede ejecutarse en paralelo"
        ) / 100

    with col2:
        max_processors = st.slider(
            "N√∫mero m√°ximo de procesadores",
            min_value=1,
            max_value=32,
            value=16,
            step=1
        )

    # C√°lculos
    speedups_amdahl = PerformanceMetrics.calculate_amdahl_for_range(
        parallel_fraction, max_processors
    )

    max_speedup = PerformanceMetrics.calculate_max_theoretical_speedup(parallel_fraction)

    # Informaci√≥n
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Fracci√≥n Paralelizable", f"{parallel_fraction * 100:.0f}%")
    with col2:
        st.metric("Fracci√≥n Secuencial", f"{(1 - parallel_fraction) * 100:.0f}%")
    with col3:
        st.metric("Speedup M√°ximo Te√≥rico", f"{max_speedup:.2f}x")

    # Gr√°fico de Amdahl
    fig_amdahl = go.Figure()

    # Diferentes fracciones paralelas
    fractions = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0]
    colors = px.colors.sequential.Viridis

    for idx, frac in enumerate(fractions):
        speedups = PerformanceMetrics.calculate_amdahl_for_range(frac, max_processors)
        fig_amdahl.add_trace(go.Scatter(
            x=list(speedups.keys()),
            y=list(speedups.values()),
            mode='lines+markers',
            name=f'P = {frac * 100:.0f}%',
            line=dict(width=2),
            marker=dict(size=6)
        ))

    # L√≠nea ideal
    fig_amdahl.add_trace(go.Scatter(
        x=list(range(1, max_processors + 1)),
        y=list(range(1, max_processors + 1)),
        mode='lines',
        line=dict(dash='dash', color='gray', width=2),
        name='Speedup Lineal Ideal'
    ))

    fig_amdahl.update_layout(
        title="Ley de Amdahl: Speedup vs N√∫mero de Procesadores",
        xaxis_title="N√∫mero de Procesadores",
        yaxis_title="Speedup",
        height=500,
        hovermode='x unified'
    )

    st.plotly_chart(fig_amdahl, use_container_width=True)

    st.markdown("---")

    # Respuestas a preguntas del ejercicio
    st.subheader("üìù Respuestas al Ejercicio")

    st.markdown("#### Pregunta: Seg√∫n la Ley de Amdahl, ¬øcu√°l es el rendimiento con paralelismo del 60% y 90%?")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**üîµ Paralelismo del 60% (P = 0.6)**")
        speedups_60 = PerformanceMetrics.calculate_amdahl_for_range(0.6, 8)
        df_60 = pd.DataFrame({
            'Procesadores': list(speedups_60.keys()),
            'Speedup Te√≥rico': list(speedups_60.values())
        })
        st.dataframe(df_60.style.format({'Speedup Te√≥rico': '{:.3f}x'}),
                     use_container_width=True)

        max_speedup_60 = PerformanceMetrics.calculate_max_theoretical_speedup(0.6)
        st.info(f"**Speedup m√°ximo te√≥rico:** {max_speedup_60:.3f}x (con infinitos procesadores)")

    with col2:
        st.markdown("**üü¢ Paralelismo del 90% (P = 0.9)**")
        speedups_90 = PerformanceMetrics.calculate_amdahl_for_range(0.9, 8)
        df_90 = pd.DataFrame({
            'Procesadores': list(speedups_90.keys()),
            'Speedup Te√≥rico': list(speedups_90.values())
        })
        st.dataframe(df_90.style.format({'Speedup Te√≥rico': '{:.3f}x'}),
                     use_container_width=True)

        max_speedup_90 = PerformanceMetrics.calculate_max_theoretical_speedup(0.9)
        st.info(f"**Speedup m√°ximo te√≥rico:** {max_speedup_90:.3f}x (con infinitos procesadores)")

    # Comparaci√≥n con resultados reales
    if 'last_results' in st.session_state:
        st.markdown("---")
        st.subheader("üîç Comparaci√≥n: Te√≥rico vs Real")

        real_speedups = st.session_state['last_results']['analysis']['speedups']

        comparison_data = []
        for num_workers in sorted(real_speedups.keys()):
            comparison_data.append({
                'Workers': num_workers,
                'Speedup Real': real_speedups[num_workers],
                'Amdahl 60%': speedups_60.get(num_workers, 0),
                'Amdahl 90%': speedups_90.get(num_workers, 0)
            })

        df_comparison = pd.DataFrame(comparison_data)

        fig_comparison = go.Figure()
        fig_comparison.add_trace(go.Scatter(
            x=df_comparison['Workers'],
            y=df_comparison['Speedup Real'],
            mode='lines+markers',
            name='Speedup Real',
            line=dict(width=3, color='#1f77b4'),
            marker=dict(size=10)
        ))
        fig_comparison.add_trace(go.Scatter(
            x=df_comparison['Workers'],
            y=df_comparison['Amdahl 60%'],
            mode='lines+markers',
            name='Amdahl 60%',
            line=dict(dash='dash', color='#ff7f0e')
        ))
        fig_comparison.add_trace(go.Scatter(
            x=df_comparison['Workers'],
            y=df_comparison['Amdahl 90%'],
            mode='lines+markers',
            name='Amdahl 90%',
            line=dict(dash='dash', color='#2ca02c')
        ))

        fig_comparison.update_layout(
            title="Comparaci√≥n: Speedup Real vs Predicciones de Amdahl",
            xaxis_title="N√∫mero de Workers",
            yaxis_title="Speedup",
            height=500
        )

        st.plotly_chart(fig_comparison, use_container_width=True)

        st.markdown(df_comparison.style.format({
            'Speedup Real': '{:.3f}x',
            'Amdahl 60%': '{:.3f}x',
            'Amdahl 90%': '{:.3f}x'
        }).to_html(), unsafe_allow_html=True)


def display_flynn_taxonomy():
    """Muestra informaci√≥n sobre la Taxonom√≠a de Flynn."""
    st.markdown('<p class="section-header">üèõÔ∏è Taxonom√≠a de Flynn</p>',
                unsafe_allow_html=True)

    flynn_info = PerformanceMetrics.get_flynn_taxonomy()

    st.markdown("#### Pregunta: ¬øQu√© arquitectura de Flynn se utiliz√≥ en este ejercicio?")

    # Respuesta destacada
    st.markdown(f"""
    <div class="success-box">
        <h3>‚úÖ Respuesta: {flynn_info['classification']}</h3>
        <p><strong>{flynn_info['full_name']}</strong></p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("---")

    # Explicaci√≥n detallada
    st.subheader("üìö ¬øQu√© es la Taxonom√≠a de Flynn?")

    st.markdown("""
    La **Taxonom√≠a de Flynn** es una clasificaci√≥n de arquitecturas de computadoras basada en
    el n√∫mero de flujos de instrucciones y datos concurrentes:
    """)

    # Tabla de clasificaciones
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **üîµ SISD** (Single Instruction, Single Data)
        - Computadoras secuenciales tradicionales
        - Un procesador ejecuta una instrucci√≥n sobre un dato
        - Ejemplo: Procesadores antiguos de un solo n√∫cleo

        **üü¢ SIMD** (Single Instruction, Multiple Data)
        - Misma instrucci√≥n se aplica a m√∫ltiples datos
        - Ejemplo: Procesamiento vectorial, GPUs
        """)

    with col2:
        st.markdown("""
        **üü° MISD** (Multiple Instruction, Single Data)
        - M√∫ltiples instrucciones sobre el mismo dato
        - Poco com√∫n en la pr√°ctica
        - Ejemplo: Sistemas tolerantes a fallos

        **üü£ MIMD** (Multiple Instruction, Multiple Data)
        - M√∫ltiples procesadores, instrucciones y datos independientes
        - Ejemplo: Sistemas multiprocesador, clusters
        """)

    st.markdown("---")

    # Justificaci√≥n para este ejercicio
    st.subheader("üéØ Justificaci√≥n para Este Ejercicio")

    st.markdown(f"""
    <div class="info-box">
        <h4>¬øPor qu√© este ejercicio es MIMD?</h4>
        <p>{flynn_info['justification']}</p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("**Ejemplos de arquitecturas MIMD:**")
    for example in flynn_info['examples']:
        st.markdown(f"- {example}")

    # Diagrama visual
    st.markdown("---")
    st.subheader("üìä Diagrama de Funcionamiento")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **Ejecuci√≥n Secuencial (SISD):**
        ```
        CPU √∫nica
        ‚îú‚îÄ‚îÄ Instrucci√≥n 1 ‚Üí Dato A
        ‚îú‚îÄ‚îÄ Instrucci√≥n 2 ‚Üí Dato B
        ‚îú‚îÄ‚îÄ Instrucci√≥n 3 ‚Üí Dato C
        ‚îî‚îÄ‚îÄ Instrucci√≥n 4 ‚Üí Dato D
        ```
        Todo se ejecuta secuencialmente en un solo n√∫cleo.
        """)

    with col2:
        st.markdown("""
        **Ejecuci√≥n Paralela (MIMD):**
        ```
        CPU 1: Instrucci√≥n A ‚Üí Chunk 1
        CPU 2: Instrucci√≥n B ‚Üí Chunk 2
        CPU 3: Instrucci√≥n C ‚Üí Chunk 3
        CPU 4: Instrucci√≥n D ‚Üí Chunk 4
        ```
        Cada CPU ejecuta diferentes instrucciones sobre diferentes datos simult√°neamente.
        """)

    st.markdown("---")

    # Caracter√≠sticas del sistema usado
    st.subheader("üíª Caracter√≠sticas del Sistema Usado en Este Ejercicio")

    system_info = get_system_info()

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Arquitectura", system_info['architecture'])
        st.metric("N√∫cleos F√≠sicos", system_info['cpu_count_physical'])
    with col2:
        st.metric("Procesador", "Intel i5-10210U")
        st.metric("N√∫cleos L√≥gicos", system_info['cpu_count_logical'])
    with col3:
        st.metric("Clasificaci√≥n Flynn", "MIMD")
        st.metric("Tecnolog√≠a", "Multicore + Hyper-Threading")

    st.info("""
    **Conclusi√≥n:** El Intel Core i5-10210U con 4 n√∫cleos f√≠sicos y 8 hilos l√≥gicos
    (gracias a Hyper-Threading) permite ejecutar m√∫ltiples instrucciones sobre m√∫ltiples
    datos de forma simult√°nea, clasific√°ndose como arquitectura **MIMD**.
    """)


def display_information():
    """Muestra informaci√≥n general de la aplicaci√≥n."""
    st.markdown('<p class="section-header">‚ÑπÔ∏è Informaci√≥n de la Aplicaci√≥n</p>',
                unsafe_allow_html=True)

    st.markdown("""
    ## üìñ Acerca de Esta Aplicaci√≥n

    Esta aplicaci√≥n fue desarrollada para el ejercicio de **Programaci√≥n Paralela** y permite:

    ### ‚ú® Caracter√≠sticas Principales

    1. **Multiplicaci√≥n de Matrices Paralelas**
       - Matrices cuadradas de hasta 2000x2000
       - Soporte para m√∫ltiples m√©todos de paralelizaci√≥n
       - Comparaci√≥n de rendimiento en tiempo real

    2. **An√°lisis de Rendimiento**
       - C√°lculo de Speedup (aceleraci√≥n)
       - Medici√≥n de eficiencia
       - Comparaci√≥n con baseline secuencial

    3. **Ley de Amdahl**
       - C√°lculos te√≥ricos de speedup m√°ximo
       - Visualizaci√≥n interactiva
       - Comparaci√≥n con resultados reales

    4. **Taxonom√≠a de Flynn**
       - Clasificaci√≥n de arquitectura utilizada
       - Justificaci√≥n t√©cnica
       - Ejemplos y diagramas

    ### üõ†Ô∏è Tecnolog√≠as Utilizadas

    - **Python 3.11+**
    - **Streamlit** - Framework web interactivo
    - **NumPy** - Operaciones matriciales optimizadas
    - **Multiprocessing** - Paralelizaci√≥n real con m√∫ltiples procesos
    - **Plotly** - Visualizaciones interactivas
    - **Pandas** - Manejo de datos tabulares
    - **psutil** - Informaci√≥n del sistema

    ### üìä M√©todos de Paralelizaci√≥n

    #### 1. Multiprocessing (Recomendado)
    - Utiliza m√∫ltiples procesos del sistema operativo
    - Verdadero paralelismo (m√∫ltiples CPUs)
    - Evita el GIL (Global Interpreter Lock) de Python
    - Mejor rendimiento para operaciones CPU-intensive

    #### 2. Threading
    - Utiliza m√∫ltiples hilos dentro de un proceso
    - Limitado por el GIL en Python
    - Incluido para comparaci√≥n educativa
    - Puede ser √∫til para operaciones I/O-bound

    #### 3. ProcessPoolExecutor
    - API moderna para manejo de procesos
    - Similar a Multiprocessing pero con interfaz m√°s limpia
    - Parte del m√≥dulo concurrent.futures

    ### üéØ Objetivos del Ejercicio

    ‚úÖ Implementar multiplicaci√≥n de matrices paralela
    ‚úÖ Variar el n√∫mero de hilos/procesos
    ‚úÖ Identificar la arquitectura seg√∫n Flynn (MIMD)
    ‚úÖ Calcular rendimiento seg√∫n Ley de Amdahl (60% y 90%)
    ‚úÖ Comparar rendimiento te√≥rico vs real

    ### üìö Referencias

    - **Ley de Amdahl**: Gene Amdahl (1967) - "Validity of the single processor approach
      to achieving large scale computing capabilities"
    - **Taxonom√≠a de Flynn**: Michael J. Flynn (1966) - Clasificaci√≥n de arquitecturas
      de computadoras paralelas
    - **NumPy Documentation**: https://numpy.org/doc/
    - **Python Multiprocessing**: https://docs.python.org/3/library/multiprocessing.html

    ### üë®‚Äçüíª Autor

    Desarrollado como ejercicio acad√©mico de Programaci√≥n Paralela.

    ### üìù Notas Importantes

    - Para matrices muy grandes (>1500x1500), el tiempo de ejecuci√≥n puede ser considerable
    - El speedup real puede variar dependiendo de la carga del sistema
    - Se recomienda cerrar otras aplicaciones para obtener mediciones m√°s precisas
    - Los resultados pueden variar entre ejecuciones debido a factores del sistema operativo

    ### üöÄ C√≥mo Usar

    1. Ajusta el tama√±o de matriz en el panel lateral
    2. Selecciona los n√∫meros de workers a probar
    3. Elige el m√©todo de paralelizaci√≥n
    4. Presiona "Ejecutar Multiplicaci√≥n"
    5. Revisa los resultados en las diferentes pesta√±as
    """)


if __name__ == "__main__":
    main()
